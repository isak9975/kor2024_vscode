[ 람다식]
    1. 정의 : 함수를 간단하게 표현할때 사용되는 문법

    2. 형태 : 
        - 정의 함수
            function 함수명 ( 매개변수1, 매개변수2){

            }
        - 람다식 함수
            (매개변수1, 매개변수2) => {

            }
        *차이점 : function 키워드와 함수명이 없다.

    3. 특징
        1. 짧고 간단하게 함수를 사용 할수 있다.
        2. 값을 받을때 ( )소괄호를 사용하고 실행할 명령어는 { }중괄호 사용한다.
        3. 만약 return할 내용이 없다면 생략 가능하고
        4. 매개변수 1개 조노재하거나, 실행명령어가 한줄이면 ( )와 { } 생략이 가능하다.
    
    4. 람다식 함수는 함수명이 존재하지 않는다. 주로 변수및 상수에 대입해서 사용한다
    -const 상수명 = (매개변수1,매개변수2) => {실행문;}
    

    [ 반복문 FOR 라이브러리]
        1. forEach  ,   배열내 요소 하나씩 반복 순회하여 매개변수에 대입, true 불가능
            배열변수명.foreachP(() =>{})

        2. map  , 배열내 요소 하나씩 반복 숭회하여 개매변수에 대입반복, return 가입
            배열변수명.map() => {}
            let 새로운배열 = 배열변수명.map(()=>{})



----------------------------------------------------------------------------------------------
[ Fetch ]
    1. 정의 : 웹서버(자바) 에서 데이터를 가져오거나 보내기 위해 사용되는 JS 함수
    2. 목적 
        1. 데이터를 요청하거나 보낼때 사용된다. 주로 CRUD(REST API)구축할때 사용한다.
        데이터 요형 : GET       : 서버에서 데이터를 가져오기 위한 HTTP 메소드 규약   
        데이터 전송 : POST      : 서버에 (저장)데이터를 보내기 위한 HTTP 메소드 규약
        데이터 수정 : PUT       : 서버에 (수정)데이터를 보내기 위한 HTTP 메소드 규약
        데이터 삭제 : DELETE    : 서버에 데이터를 삭제하기 위한 HTTP 메소드 규약
        2. 비동기 통신과 동기 통신 지원한다.
            -비동기 : 요청 보내고 응답이 올때까지 다른 작업 수행.(병행처리)
            -동기   : 요청 보내고 응답이 올때까지 다른 작업을 대기 상태(직렬처리)
        
    3. 생활속 비동기( 동시 처리 )
        1. 유튜브 시청하면서 댓글 작성하는것.
        2. SNS에서 사진을 보면서 메세지(DM)를 전송 하는 것
        3. 싱글페이지(HTML 1개 프로젝트), 페이지 전환시 부드럽다, 로딩빠르다
            *비동기함수 : ajax(아작스/에이잭스), fetch, axios 함수
    4. 형태
        fetch( 통신할 URL, option)
            -then(response => response.json())
            -then(data => {} )
            -catch(error => {} )